#+TITLE: init.el for Noah Hoffman
#+AUTHOR: Noah Hoffman

#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+STYLE: <link rel="stylesheet" type="text/css" href="./worg.css" />
#+BIND: org-export-html-postamble nil
#+BABEL: :results output :exports both

- The source for this page is available at https://github.com/nhoffman/.emacs.d
- The html-exported version of this page is hosted at http://nhoffman.github.com/.emacs.d

#+BEGIN_SRC elisp :tangle init.el
(message "loading ~/.emacs.d/init.el")
#+END_SRC

* License
#+BEGIN_SRC elisp :tangle init.el
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
#+END_SRC

* Using this file

| C-c i     | markup paragraph at point as a code block |
| C-c C-v t | tangle this file                          |

#+BEGIN_SRC elisp :tangle init.el
  (setq init-file-name "init.el")
  (defun init-insert-code-block ()
    ;; Insert a code block that will be tangled into `init-file-name`
    (interactive)
    (backward-paragraph)
    (insert (format "#+BEGIN_SRC elisp :tangle %s" init-file-name))
    (forward-paragraph)
    (insert "#+END_SRC\n"))
  (global-set-key (kbd "C-c i") 'init-insert-code-block)
#+END_SRC

Convenience function to (re)load init.el

#+BEGIN_SRC elisp :tangle init.el
(defun init-load ()
  "Load ~/.emacs.d/init.el"
  (interactive)
  (load "~/.emacs.d/init.el"))
(global-set-key (kbd "M-C-i") 'init-load)
#+END_SRC

Tangle and export html

#+BEGIN_SRC elisp :tangle init.el
  (defun init-compile ()
    "Tangle init.org and export html"
    (interactive)
    (org-babel-tangle)
    (org-export-as-html 3)
    (copy-file "init.html" "../.emacs.d.ghpages/index.html" t)
    )
#+END_SRC

Set up ghpages clone

#+begin_example
git clone git@github.com:nhoffman/.emacs.d.git .emacs.d.ghpages
cd .emacs.d.ghpages
git checkout gh-pages
#+end_example

* Various aliases and key bindings

#+BEGIN_SRC elisp :tangle init.el
(defalias 'dtw 'delete-trailing-whitespace)
#+END_SRC

Function keys

#+BEGIN_SRC elisp :tangle init.el
(global-set-key (kbd "<f6>") 'linum-mode)
(global-set-key (kbd "<f7>") 'visual-line-mode)
(global-set-key (kbd "<f8>") 'ns-toggle-fullscreen)
#+END_SRC

* Startup and general appearance

Enable debugging

#+BEGIN_SRC elisp :tangle init.el
;; (setq debug-on-error t)
;; (setq debug-on-signal t)

#+END_SRC

Startup appearance.

#+BEGIN_SRC elisp :tangle init.el
(setq column-number-mode t)
(setq inhibit-splash-screen t)
(setq require-final-newline t)
(setq make-backup-files nil) ;; no backup files
(setq initial-scratch-message nil) ;; no instructions in the *scratch* buffer
(setq suggest-key-bindings 4)
(show-paren-mode 1)
#+END_SRC

Date and time in status bar. See http://efod.se/writings/linuxbook/html/date-and-time.html

#+BEGIN_SRC elisp :tangle init.el
(setq display-time-day-and-date t
      display-time-24hr-format t)
(display-time)
#+END_SRC

File path in title bar. See http://stackoverflow.com/questions/3669511/the-function-to-show-current-files-full-path-in-mini-buffer

#+BEGIN_SRC elisp :tangle init.el
(setq frame-title-format
      (list (format "%s %%S: %%j " (system-name))
        '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))
#+END_SRC

automatically refresh buffers from disk (default is every 5 sec)
see http://www.cs.cmu.edu/cgi-bin/info2www?(emacs)Reverting

#+BEGIN_SRC elisp :tangle init.el
(global-auto-revert-mode 1)
#+END_SRC

* Exiting and saving

Require prompt before exit on C-x C-c
- http://www.dotemacs.de/dotfiles/KilianAFoth.emacs.html

#+BEGIN_SRC elisp :tangle init.el
(global-set-key [(control x) (control c)]
		(function
		 (lambda () (interactive)
		   (cond ((y-or-n-p "Quit? (save-buffers-kill-terminal) ")
			  (save-buffers-kill-terminal))))))
#+END_SRC

Delete trailing whitespace before save.

#+BEGIN_SRC elisp :tangle init.el
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

* Platform and display-specific settings

Detect platform and window system and set up fonts accordingly
#+BEGIN_SRC elisp :tangle init.el
(defun fix-frame ()
  (interactive)
  (menu-bar-mode -1) ;; hide menu bar
  (tool-bar-mode -1) ;; hide tool bar
  (cond ((string= "ns" window-system) ;; cocoa
	 (progn (message (format "** running %s windowing system" window-system))
	 ;; key bindings for mac - see
	 ;; http://stuff-things.net/2009/01/06/emacs-on-the-mac/
	 ;; http://osx.iusethis.com/app/carbonemacspackage
	 (set-keyboard-coding-system 'mac-roman)
	 (setq mac-option-modifier 'meta)
	 (setq mac-command-key-is-meta nil)
	 (setq my-default-font "Bitstream Vera Sans Mono-14")
	 ;; enable edit-with-emacs for chrome
	 ;; (require 'edit-server)
	 ;; (edit-server-start)
	 ))
	((string= "x" window-system)
	 (progn
	   (message (format "** running %s windowing system" window-system))
	   (setq my-default-font "Liberation Mono-10")
	   ;; M-w or C-w copies to system clipboard
	   ;; see http://www.gnu.org/software/emacs/elisp/html_node/Window-System-Selections.html
	   (setq x-select-enable-clipboard t)
	   ;; (set-scroll-bar-mode -1) ;; hide scroll bar
	   (scroll-bar-mode -1) ;; hide scroll bar
	   ))
	(t
	 (progn
	 (message "** running unknown windowing system")
	 (setq my-default-font nil)
	 (scroll-bar-mode -1) ;; hide scroll bar
	 ))
	)

  (unless (equal window-system nil)
    (message (format "** setting default font to %s" my-default-font))
    (condition-case nil
	(set-default-font my-default-font)
      (error (message (format "** could not set to font %s" my-default-font))))
    )
  )

(defun font-dejavu ()
  ;; set default font to dejavu sans mono-11
  (interactive)
  (set-default-font "dejavu sans mono-11")
  )

#+END_SRC

Apply above settings on startup

#+BEGIN_SRC elisp :tangle init.el
(fix-frame)
#+END_SRC

...and when creating a new connection to emacs server via emacsclient

TODO - not sure why this doesn't seem to take effect on frame creation

#+BEGIN_SRC elisp :tangle init.el
(add-hook 'server-visit-hook 'fix-frame)
#+END_SRC

* Scrolling

See http://www.emacswiki.org/emacs/SmoothScrolling

#+BEGIN_SRC elisp :tangle init.el
(setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; number of lines at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mosue 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time
(setq scroll-conservatively 1) ;; scroll by one line to follow cursor off screen
(setq scroll-margin 2) ;; Start scrolling when 2 lines from top/bottom
#+END_SRC

* Marking

#+BEGIN_SRC elisp :tangle init.el
(transient-mark-mode 1) ;; highlight active region - default in emacs 23.1+
(global-set-key (kbd "M-C-t") 'transient-mark-mode)
(global-set-key (kbd "C-x C-b") 'electric-buffer-list)
#+END_SRC

* Cursor Appearance.

#+BEGIN_SRC elisp :tangle init.el
(set-cursor-color "red")
(blink-cursor-mode 1)
#+END_SRC

* iswitchb mode

#+BEGIN_SRC elisp :tangle init.el
(iswitchb-mode 1)
#+END_SRC

* Keyboard macros

See http://www.emacswiki.org/emacs/KeyboardMacros
note that default bindings for macros are:

| C-x ( | start defining a keyboard macro  |
| C-x ) | stop defining the keyboard macro |
| C-x e | execute the keyboard macro       |

Some additional keyboard macro bindings.

#+BEGIN_SRC elisp :tangle init.el
(global-set-key (kbd "<f5>") 'call-last-kbd-macro)
#+END_SRC

* emacs desktop

References:
- http://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html
- http://www.emacswiki.org/emacs/DeskTop

#+BEGIN_SRC elisp :tangle init.el
(require 'desktop)
#+END_SRC

Save desktop periodically instead of just on exit, but not if emacs is
started with =--no-desktop=

#+BEGIN_SRC elisp :tangle init.el
(desktop-save-mode 1)
(if (and desktop-save-mode (not (member "--no-desktop" command-line-args)))
    (progn
      (message "Enabling desktop auto-save")
      (add-hook 'auto-save-hook 'desktop-save-in-desktop-dir)))
#+END_SRC

* Move lines up and down with arrow keys

See http://stackoverflow.com/questions/2423834/move-line-region-up-and-down-in-emacs

Move line up

#+BEGIN_SRC elisp :tangle init.el
(defun move-line-up ()
  (interactive)
  (transpose-lines 1)
  (previous-line 2))
(global-set-key (kbd "M-<up>") 'move-line-up)
#+END_SRC

Move line down.

#+BEGIN_SRC elisp :tangle init.el
(defun move-line-down ()
  (interactive)
  (next-line 1)
  (transpose-lines 1)
  (previous-line 1))
(global-set-key (kbd "M-<down>") 'move-line-down)
#+END_SRC

* Buffers and windows

** Switch windows with arrow keys

Note that other-window is bound by default to =C-x o=

#+BEGIN_SRC elisp :tangle init.el
(defun back-window ()
  (interactive)
  (other-window -1))
(global-set-key (kbd "C-<right>") 'other-window)
(global-set-key (kbd "C-<left>") 'back-window)
#+END_SRC

** Transpose buffers

- see http://www.emacswiki.org/emacs/SwitchingBuffers
- note that original code used function 'plusp', which seems not to be defined in recent versions of emacs

#+BEGIN_SRC elisp :tangle init.el
(defun transpose-buffers (arg)
  "Transpose the buffers shown in two windows."
  (interactive "p")
  (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
    (while (/= arg 0)
      (let ((this-win (window-buffer))
            (next-win (window-buffer (funcall selector))))
        (set-window-buffer (selected-window) next-win)
        (set-window-buffer (funcall selector) this-win)
        (select-window (funcall selector)))
      ;; (setq arg (if (plusp arg) (1- arg) (1+ arg)))
      (setq arg (if (>= arg 0) (1- arg) (1+ arg)))
      )))
(global-set-key (kbd "C-x 4") 'transpose-buffers)
#+END_SRC

** Switch buffers between frames

Also from http://www.emacswiki.org/emacs/SwitchingBuffers

#+BEGIN_SRC elisp :tangle init.el
(defun switch-buffers-between-frames ()
  "switch-buffers-between-frames switches the buffers between the two last frames"
  (interactive)
  (let ((this-frame-buffer nil)
	(other-frame-buffer nil))
    (setq this-frame-buffer (car (frame-parameter nil 'buffer-list)))
    (other-frame 1)
    (setq other-frame-buffer (car (frame-parameter nil 'buffer-list)))
    (switch-to-buffer this-frame-buffer)
    (other-frame 1)
    (switch-to-buffer other-frame-buffer)))
(global-set-key (kbd "C-x 5") 'switch-buffers-between-frames)
#+END_SRC

* spelling

Use aspell instead of ispell

#+BEGIN_SRC elisp :tangle init.el
(setq-default ispell-program-name "aspell")
(setq ispell-dictionary "en")
#+END_SRC

Enable on-the-fly spell-check

#+BEGIN_SRC elisp :tangle init.el
(autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)
(setq flyspell-issue-welcome-flag nil) ;; fix error message
#+END_SRC

* pine/alpine

http://snarfed.org/space/emacs%20font-lock%20faces%20for%20composing%20email

#+BEGIN_SRC elisp :tangle init.el
  (add-hook 'find-file-hooks
            '(lambda ()
               (if (equal "pico." (substring (buffer-name (current-buffer)) 0 5))
                   ;; (message "** running hook for pine/alpine")
                   (mail-mode))))
#+END_SRC

* general load path

#+BEGIN_SRC elisp :tangle init.el
(add-to-list 'load-path "~/.emacs.d/")
#+END_SRC

* ELPA

Identify and install anew package using =M-x package-list-packages=

Use all available package repositories (GNU, ELPA and Marmalade).

#+BEGIN_SRC elisp :tangle init.el
(setq package-archives '(("ELPA" . "http://tromey.com/elpa/")
                          ("gnu" . "http://elpa.gnu.org/packages/")
                          ("marmalade" . "http://marmalade-repo.org/packages/")))
#+END_SRC

* Auctex

#+BEGIN_SRC elisp :tangle init.el
(condition-case nil
    (require 'tex-site)
  (error (message "** could not load auctex")))
#+END_SRC

* ESS

#+BEGIN_SRC elisp :tangle init.el
(condition-case nil
    (require 'ess-site "~/.emacs.d/ess/lisp/ess-site")
  (error (message "** could not load local ESS in ~/.emacs.d; trying system ESS")
	 (condition-case nil
	     (require 'ess-site)
	   (error (message "** could not load system ESS")))
	 )
  )
#+END_SRC

Hooks

#+BEGIN_SRC elisp :tangle init.el
(add-hook 'ess-mode-hook
	  '(lambda()
	     (message "Loading ess-mode hooks")
	     ;; leave my underscore key alone!
	     (setq ess-S-assign "_")
	     ;; (ess-toggle-underscore nil)
	     ;; set ESS indentation style
	     ;; choose from GNU, BSD, K&R, CLB, and C++
	     (ess-set-style 'GNU 'quiet)
	     (flyspell-mode)
	     )
	  )
#+END_SRC

* org-mode

Add a git submodule (http://orgmode.org/worg/org-faq.html#keeping-current-with-Org-mode-development)

: git submodule add git://orgmode.org/org-mode.git
: git submodule init
: git commit -a -m "add org-mode as submodule"
: git push

Add git submodule to clean clone

: cd .emacs.d && git submodule init && git submodule update

Refresh

: cd ~/.emacs.d/org-mode && git pull && make clean && make && make doc

Install

: cd org-mode && make && make doc

Use org-mode

#+BEGIN_SRC elisp :tangle init.el
(add-to-list 'load-path "~/.emacs.d/org-mode/lisp")
(require 'org-install)
#+END_SRC

org-mode hooks

#+BEGIN_SRC elisp :tangle init.el
(add-hook 'org-mode-hook
	  '(lambda ()
	     (message "Loading org-mode hooks")
	     (turn-on-font-lock)
	     (define-key org-mode-map (kbd "M-<right>") 'forward-word)
	     (define-key org-mode-map (kbd "M-<left>") 'backward-word)
	     ;; provides key mapping for the above; replaces default
	     ;; key bindings for org-promote/demote-subtree
	     (define-key org-mode-map (kbd "M-S-<right>") 'org-do-demote)
	     (define-key org-mode-map (kbd "M-S-<left>") 'org-do-promote)
	     (org-indent-mode)
	     (visual-line-mode)
	     ;; org-babel
	     (org-babel-do-load-languages
	      'org-babel-load-languages
	      '((R . t)
		(latex . t)
		(python . t)
		(sh . t)
		(sql . t)
		(sqlite . t)
		(pygment . t)
		))
	     )
	  )

(custom-set-variables
 '(org-confirm-babel-evaluate nil)
 '(org-src-fontify-natively t))

(setq org-agenda-files (list "~/Dropbox/notes/index.org"
			     "~/Dropbox/fredross/notes/plans.org"
			     ))

(push '("\\.org\\'" . org-mode) auto-mode-alist)
(push '("\\.org\\.txt\\'" . org-mode) auto-mode-alist)
#+END_SRC

** pygments

http://oompiller.wordpress.com/2011/07/05/syntax-highlighting-using-pygment-in-org-mode/

Install with

: cd ~/.emacs.d
: wget https://raw.github.com/jianingy/org-babel-plugins/master/ob-pygment.el

Requires =(setq org-babel-load-languages (quote (pygment . t)))= above

#+BEGIN_SRC elisp :tangle init.el
(condition-case nil
    (progn
      (require 'ob-pygment)
      (setq org-pygment-path "/usr/local/bin/pygmentize"))
  (error (message "** could not load ob-pygment")))
#+END_SRC

** org-mode utilities

#+BEGIN_SRC elisp :tangle init.el
(defun insert-date ()
  ;; Insert today's timestamp in format "<%Y-%m-%d %a>"
  (interactive)
  (insert (format-time-string "<%Y-%m-%d %a>")))
(global-set-key (kbd "C-c d") 'insert-date)
#+END_SRC

#+BEGIN_SRC elisp :tangle init.el
(defun org-add-entry (filename time-format)
  ;; Add an entry to an org-file with today's timestamp.
  (interactive "FFile: ")
  (find-file filename)
  (end-of-buffer)
  (delete-blank-lines)
  ;;(insert "\n* ")
  (insert (format-time-string time-format))
  (beginning-of-line)
  (forward-char 2))
#+END_SRC

Add a new entry to main notes file.

#+BEGIN_SRC elisp :tangle init.el
(global-set-key
 (kbd "C-x C-n") (lambda () (interactive)
		   (org-add-entry "~/Dropbox/notes/index.org"
				  "\n* <%Y-%m-%d %a>")))
#+END_SRC

Add an entry to todo file.

#+BEGIN_SRC elisp :tangle init.el
(global-set-key
 (kbd "C-x C-m") (lambda () (interactive)
		   (org-add-entry "~/Dropbox/notes/todo.org"
				  "\n** TODO <%Y-%m-%d %a>")))
#+END_SRC

* moinmoin
Requires http://homepage1.nifty.com/bmonkey/emacs/elisp/screen-lines.el

Installation:

: wget -U Mozilla -O moinmoin-mode.el "http://moinmoin.wikiwikiweb.de/EmacsForMoinMoin/MoinMoinMode?action=raw"

#+BEGIN_SRC elisp :tangle init.el
(condition-case nil
    (require 'moinmoin-mode)
  (error (message "** could not load moinmon-mode")))
#+END_SRC

* markdown

See http://jblevins.org/projects/markdown-mode/

Installation

: wget http://jblevins.org/git/markdown-mode.git/plain/markdown-mode.el

#+BEGIN_SRC elisp :tangle init.el
(autoload 'markdown-mode "markdown-mode.el"
   "Major mode for editing Markdown files" t)
(push '("\\.md" . markdown-mode) auto-mode-alist)
#+END_SRC

* chrome "edit with emacs"

#+BEGIN_SRC elisp :tangle init.el
(condition-case nil
    (require 'edit-server)
  (error (message "** could not load edit-server (chrome edit with emacs)")))

(condition-case nil
    (edit-server-start)
  (error (message "** could not start edit-server (chrome edit with emacs)")))
#+END_SRC

* Python

- http://jesselegg.com/archives/2010/02/25/emacs-python-programmers-part-1/

Hooks

#+BEGIN_SRC elisp :tangle init.el
(add-hook 'python-mode-hook
	  '(lambda ()
	     (message "Loading python-mode hooks")
	     (setq indent-tabs-mode nil)
	     (setq tab-width 4)
	     (setq py-indent-offset tab-width)
	     (setq py-smart-indentation t)
	     (define-key python-mode-map "\C-m" 'newline-and-indent)
	     ;; (hs-minor-mode)
	     ;; add function index to menu bar
	     ;; (imenu-add-menubar-index)
	     ;; (python-mode-untabify)
	     ;; (linum-mode)
	     )
	  )
#+END_SRC

File name mappings

#+BEGIN_SRC elisp :tangle init.el
(push '("SConstruct" . python-mode) auto-mode-alist)
(push '("SConscript" . python-mode) auto-mode-alist)
(push '("*.cgi" . python-mode) auto-mode-alist)
#+END_SRC

Default 'untabify converts a tab to equivalent number of spaces before
deleting a single character.

#+BEGIN_SRC elisp :tangle init.el
(setq backward-delete-char-untabify-method "all")
#+END_SRC

* python-pylint

https://gist.github.com/302848

: git submodule add git://gist.github.com/302848.git python-pylint

Invoke with =M-x python-pylint RET=

#+BEGIN_SRC elisp :tangle init.el
(add-to-list 'load-path "~/.emacs.d/python-pylint")
(autoload 'python-pylint "~/.emacs.d/python-pylint")
(autoload 'pylint "~/.emacs.d/python-pylint")
#+END_SRC

* text-mode

#+BEGIN_SRC elisp :tangle init.el
(add-hook 'text-mode-hook
	  '(lambda ()
	     ;; (longlines-mode)
	     (flyspell-mode)
	     )
	  )
#+END_SRC

* rst-mode

#+BEGIN_SRC elisp :tangle init.el
(add-hook 'rst-mode-hook
	  '(lambda ()
	     (message "Loading rst-mode hooks")
	     (flyspell-mode)
	     (define-key rst-mode-map (kbd "C-c C-a") 'rst-adjust)
	     )
	  )
#+END_SRC

* tramp

- http://www.gnu.org/software/tramp/

#+BEGIN_SRC elisp :tangle init.el
(condition-case nil
    (require 'tramp)
  (setq tramp-default-method "scp")
  (error (message "** could not load tramp")))
#+END_SRC

* ibuffer

- http://emacs-fu.blogspot.com/2010/02/dealing-with-many-buffers-ibuffer.html

#+BEGIN_SRC elisp :tangle init.el
(require 'ibuffer)
(global-set-key (kbd "C-x C-g") 'ibuffer)
(global-set-key (kbd "C-x M-g") 'ibuffer-switch-to-saved-filter-groups)
(setq ibuffer-show-empty-filter-groups nil)
#+END_SRC

Function to load config file. Load on starup.

#+BEGIN_SRC elisp :tangle init.el
(setq ibuffer-config-file "~/.emacs.d/ibuffer-config.el")

(defun ibuffer-load-config ()
  ;; load the ibuffer config file
  (interactive)
  (condition-case nil
      (progn
	(message (format "** loading ibuffer config in %s" ibuffer-config-file))
	(load ibuffer-config-file)
	)
    (error (message (format "** could not load %s" ibuffer-config-file))))
  )

(ibuffer-load-config)
#+END_SRC

Show/hide all filter groups

#+BEGIN_SRC elisp :tangle init.el
(defun ibuffer-show-all-filter-groups ()
  "Show all filter groups"
  (interactive)
  (setq ibuffer-hidden-filter-groups nil)
  (ibuffer-update nil t))

(defun ibuffer-hide-all-filter-groups ()
  "Hide all filter groups"
  (interactive)
  (setq ibuffer-hidden-filter-groups
	(delete-dups
	 (append ibuffer-hidden-filter-groups
		 (mapcar 'car (ibuffer-generate-filter-groups
			       (ibuffer-current-state-list)
			       (not ibuffer-show-empty-filter-groups)
			       t)))))
  (ibuffer-update nil t))
#+END_SRC

#+BEGIN_SRC elisp :tangle init.el
(defun ibuffer-reload ()
  ;; kill ibuffer, reload the config file, and return to ibuffer
  (interactive)
  (ibuffer)
  (kill-buffer)
  (ibuffer-load-config)
  (ibuffer)
  )
#+END_SRC


From http://www.emacswiki.org/emacs/IbufferMode

#+BEGIN_SRC elisp :tangle init.el
(defun my-ibuffer-sort-hook ()
  ;; add another sorting method for ibuffer (allow the grouping of
  ;; filenames and dired buffers
  (define-ibuffer-sorter filename-or-dired
    "Sort the buffers by their pathname."
    (:description "filenames plus dired")
    (string-lessp
     (with-current-buffer (car a)
       (or buffer-file-name
	   (if (eq major-mode 'dired-mode)
	       (expand-file-name dired-directory))
	   ;; so that all non pathnames are at the end
	   "~"))
     (with-current-buffer (car b)
       (or buffer-file-name
	   (if (eq major-mode 'dired-mode)
	       (expand-file-name dired-directory))
	   ;; so that all non pathnames are at the end
	   "~"))))
  (define-key ibuffer-mode-map (kbd "s p")     'ibuffer-do-sort-by-filename-or-dired)
  )
#+END_SRC

From http://curiousprogrammer.wordpress.com/2009/04/02/ibuffer/

#+BEGIN_SRC elisp :tangle init.el
(defun ibuffer-ediff-marked-buffers ()
  "Compare two marked buffers using ediff"
  (interactive)
  (let* ((marked-buffers (ibuffer-get-marked-buffers))
         (len (length marked-buffers)))
    (unless (= 2 len)
      (error (format "%s buffer%s been marked (needs to be 2)"
                     len (if (= len 1) " has" "s have"))))
    (ediff-buffers (car marked-buffers) (cadr marked-buffers))))
#+END_SRC

Hooks

#+BEGIN_SRC elisp :tangle init.el
(add-hook 'ibuffer-mode-hook
	  '(lambda ()
	     (ibuffer-auto-mode 1) ;; minor mode that keeps the buffer list up to date
	     (ibuffer-switch-to-saved-filter-groups "default")
	     (define-key ibuffer-mode-map (kbd "a") 'ibuffer-show-all-filter-groups)
	     (define-key ibuffer-mode-map (kbd "z") 'ibuffer-hide-all-filter-groups)
	     (define-key ibuffer-mode-map (kbd "e") 'ibuffer-ediff-marked-buffers)
	     (my-ibuffer-sort-hook)
	     )
	  )
#+END_SRC

* dired

Omit uninteresting files.

- http://www.gnu.org/software/emacs/manual/html_node/dired-x/Omitting-Files-in-Dired.html

#+BEGIN_SRC elisp :tangle init.el
  ;; (add-hook 'dired-load-hook
  ;;           (lambda ()
  ;;             (load "dired-x")
  ;;             ))
  ;; (add-hook 'dired-mode-hook
  ;;           (lambda ()
  ;;             ;; Set dired-x buffer-local variables here.
  ;;             (dired-omit-mode 1)
  ;;             (setq dired-omit-extensions '(".pyc" ".git/"))
  ;;             ))
#+END_SRC

* uniquify

- http://www.emacswiki.org/emacs/uniquify

#+BEGIN_SRC elisp :tangle init.el
(require 'uniquify)
#+END_SRC

* ido-mode

- http://www.masteringemacs.org/articles/2010/10/10/introduction-to-ido-mode/

#+BEGIN_SRC elisp :tangle init.el
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(setq ido-use-virtual-buffers t)
(ido-mode 1)
#+END_SRC

use recentf with ido - see http://wikemacs.org/wiki/Recentf

#+BEGIN_SRC elisp :tangle init.el
(recentf-mode 1)
(defun ido-choose-from-recentf ()
  "Use ido to select a recently visited file from the `recentf-list'"
  (interactive)
  (find-file (ido-completing-read "Open file: " recentf-list nil t)))
(global-set-key (kbd "C-c f") 'ido-choose-from-recentf)
#+END_SRC

* git/magit

#+BEGIN_SRC elisp :tangle init.el
(require 'vc-git)
#+END_SRC

Add magit (http://philjackson.github.com/magit/) as a submodule

#+begin_example
cd ~/.emacs.d
git submodule add https://github.com/magit/magit.git
git commit -a -m "add magit as submodule"
cd magit && make
#+end_example

#+BEGIN_SRC elisp :tangle init.el
(add-to-list 'load-path "~/.emacs.d/magit")
(condition-case nil
    (require 'magit)
  (error (message "** could not load magit")))
(global-set-key (kbd "C-c m") 'magit-status)
#+END_SRC

* sql support

- see http://atomized.org/2008/10/enhancing-emacs%E2%80%99-sql-mode/

Use sqlite3

#+BEGIN_SRC elisp :tangle init.el
(setq sql-sqlite-program "sqlite3")
#+END_SRC

Preset connections

#+BEGIN_SRC elisp :tangle init.el
(setq sql-connection-alist
      '((filemaker-sps
         (sql-product 'mysql)
         (sql-server "1.2.3.4")
         (sql-user "me")
         (sql-password "mypassword")
         (sql-database "thedb")
         (sql-port 3307))))

(defun sql-connect-preset (name)
  "Connect to a predefined SQL connection listed in `sql-connection-alist'"
  (eval `(let ,(cdr (assoc name sql-connection-alist))
    (flet ((sql-get-login (&rest what)))
      (sql-product-interactive sql-product)))))

(defun sql-mastermu ()
  (interactive)
  (sql-connect-preset 'mastermu))

;; buffer naming
(defun sql-make-smart-buffer-name ()
  "Return a string that can be used to rename a SQLi buffer.
This is used to set `sql-alternate-buffer-name' within
`sql-interactive-mode'."
  (or (and (boundp 'sql-name) sql-name)
      (concat (if (not(string= "" sql-server))
                  (concat
                   (or (and (string-match "[0-9.]+" sql-server) sql-server)
                       (car (split-string sql-server "\\.")))
                   "/"))
              sql-database)))

(add-hook 'sql-interactive-mode-hook
          (lambda ()
            (setq sql-alternate-buffer-name (sql-make-smart-buffer-name))
            (sql-rename-buffer)))
#+END_SRC

* gpg

- http://www.emacswiki.org/emacs/EasyPG

#+BEGIN_SRC elisp :tangle init.el
(require 'epa-file)
;; (epa-file-enable)
;; suppress graphical passphrase prompt
(setenv "GPG_AGENT_INFO" nil)
#+END_SRC

* rainbow-delimiters

- see http://www.emacswiki.org/emacs/RainbowDelimiters

Setup

: cd ~/.emacs.d
: wget http://www.emacswiki.org/emacs/download/rainbow-delimiters.el
: emacs -batch -f batch-byte-compile rainbow-delimiters.el

Activate using =M-x rainbow-delimiters-mode=

#+BEGIN_SRC elisp :tangle init.el
(condition-case nil
    (require 'rainbow-delimiters)
  (error (message "** could not load rainbow-delimiters")))
#+END_SRC

* Misc utilities

** copy-buffer-file-name

#+BEGIN_SRC elisp :tangle init.el
(defun copy-buffer-file-name ()
  "Add `buffer-file-name' to `kill-ring'"
  (interactive)
  (kill-new buffer-file-name t)
)
#+END_SRC

** copy-and-comment

#+BEGIN_SRC elisp :tangle init.el
(fset 'copy-and-comment
   "\367\C-x\C-x\273")
(global-set-key (kbd "M-C-;") 'copy-and-comment)
#+END_SRC

** get-buffer-file-name

#+BEGIN_SRC elisp :tangle init.el
(fset 'get-buffer-file-name
   "\C-hvbuffer-file-name\C-m")
#+END_SRC

** unfill-paragraph

from http://defindit.com/readme_files/emacs_hints_tricks.html

#+BEGIN_SRC elisp :tangle init.el
(defun unfill-paragraph ()
  (interactive)
  (let ((fill-column (point-max)))
  (fill-paragraph nil)))
(global-set-key (kbd "M-C-q") 'unfill-paragraph)
#+END_SRC

* emacsclient

Buffers opened from command line don't create new frame

#+BEGIN_SRC elisp :tangle init.el
(setq ns-pop-up-frames nil)
#+END_SRC

* added by emacs

#+BEGIN_SRC elisp :tangle init.el
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; content below was added by emacs ;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(safe-local-variable-values (quote ((toggle-read-only . t))))
 '(uniquify-buffer-name-style (quote post-forward) nil (uniquify)))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )
#+END_SRC
